import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class DetailCartoonpage extends StatefulWidget {
  final Map<String, dynamic> episodeData;

  const DetailCartoonpage({Key? key, required this.episodeData})
      : super(key: key);

  @override
  State<DetailCartoonpage> createState() => _DetailCartoonpageState();
}

class _DetailCartoonpageState extends State<DetailCartoonpage> {
  late Map<String, dynamic> _episodeDetails;
  List<Map<String, dynamic>> episodesData = [];
  List<String> docIds = [];

  @override
  void initState() {
    super.initState();
    _episodeDetails = {};

    // Call when the widget is created
    _fetchEpisodeDetails();
  }

  void _fetchEpisodeDetails() async {
    try {
      String episodeId = widget.episodeData['id'];

      // Fetch data for the selected episode from Firestore using the 'id' field
      DocumentSnapshot episodeSnapshot = await FirebaseFirestore.instance
          .collection('storys')
          .doc(episodeId)
          .get();

      if (episodeSnapshot.exists) {
        Map<String, dynamic> episodeDetails =
            episodeSnapshot.data() as Map<String, dynamic>;

        setState(() {
          _episodeDetails = episodeDetails;
        });
      } else {
        print('Story with ID $episodeId does not exist.');
      }

      // Search for a collection with the same name as 'id'
      QuerySnapshot matchingCollection = await FirebaseFirestore.instance
          .collection(episodeId) // Use the name that matches 'id'
          .get();

      if (matchingCollection.docs.isNotEmpty) {
        // Display the doc ids in the collection
        matchingCollection.docs.forEach((doc) {
          String docId = doc.id;
          docIds.add(docId);
          print('Doc ID from matching collection: $docId');
        });
      } else {
        print('No matching data in the collection.');
      }
    } catch (e) {
      print('Error fetching episode details: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_episodeDetails['title'] ?? 'หน้ารายละเอียด'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Episode ID: ${widget.episodeData['id']}'),
            Text('Title: ${_episodeDetails['title'] ?? 'ไม่พบชื่อตอน'}'),
            _episodeDetails.containsKey('image_url')
                ? Image.network(
                    _episodeDetails['image_url'],
                    height: 200, // Adjust as needed
                  )
                : Text('ไม่มีรูปภาพ'),

            // Display purchased episodes
            SizedBox(height: 20),
            Text('Episodes Purchased:'),
            for (var episodeData in episodesData)
              Column(
                children: [
                  Text('Episode ID: ${episodeData['id']}'),
                  Text('Title: ${episodeData['title']}'),
                  episodeData.containsKey('image')
                      ? Image.network(
                          episodeData['image'],
                          height: 100, // Adjust as needed
                        )
                      : Text('No Image Available'),
                  SizedBox(height: 10),
                ],
              ),

            // Display Doc IDs from matching collection
            SizedBox(height: 20),
            Text('Doc IDs from matching collection:'),
            for (var docId in docIds) Text(docId),
          ],
        ),
      ),
    );
  }
}
